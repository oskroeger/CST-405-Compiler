Terminals unused in grammar

    COMMA


State 23 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: VarDeclList StmtList

    2 VarDeclList: ε
    3            | VarDecl VarDeclList

    4 VarDecl: TYPE ID SEMICOLON
    5        | TYPE ID

    6 StmtList: ε
    7         | Stmt StmtList

    8 Stmt: ID EQ Expr SEMICOLON
    9     | WRITE ID SEMICOLON

   10 Expr: Expr BinOp Expr
   11     | ID
   12     | NUMBER

   13 BinOp: PLUS


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 4 5
    ID <string> (259) 4 5 8 9 11
    SEMICOLON <char> (260) 4 8 9
    EQ <char> (261) 8
    COMMA <char> (262)
    PLUS <char> (263) 13
    NUMBER <number> (264) 12
    WRITE <string> (265) 9


Nonterminals, with rules where they appear

    $accept (11)
        on left: 0
    Program (12)
        on left: 1
        on right: 0
    VarDeclList (13)
        on left: 2 3
        on right: 1 3
    VarDecl (14)
        on left: 4 5
        on right: 3
    StmtList (15)
        on left: 6 7
        on right: 1 7
    Stmt (16)
        on left: 8 9
        on right: 7
    Expr (17)
        on left: 10 11 12
        on right: 8 10
    BinOp (18)
        on left: 13
        on right: 10


State 0

    0 $accept: • Program $end

    TYPE  shift, and go to state 1

    $default  reduce using rule 2 (VarDeclList)

    Program      go to state 2
    VarDeclList  go to state 3
    VarDecl      go to state 4


State 1

    4 VarDecl: TYPE • ID SEMICOLON
    5        | TYPE • ID

    ID  shift, and go to state 5


State 2

    0 $accept: Program • $end

    $end  shift, and go to state 6


State 3

    1 Program: VarDeclList • StmtList

    ID     shift, and go to state 7
    WRITE  shift, and go to state 8

    $default  reduce using rule 6 (StmtList)

    StmtList  go to state 9
    Stmt      go to state 10


State 4

    3 VarDeclList: VarDecl • VarDeclList

    TYPE  shift, and go to state 1

    $default  reduce using rule 2 (VarDeclList)

    VarDeclList  go to state 11
    VarDecl      go to state 4


State 5

    4 VarDecl: TYPE ID • SEMICOLON
    5        | TYPE ID •

    SEMICOLON  shift, and go to state 12

    $default  reduce using rule 5 (VarDecl)


State 6

    0 $accept: Program $end •

    $default  accept


State 7

    8 Stmt: ID • EQ Expr SEMICOLON

    EQ  shift, and go to state 13


State 8

    9 Stmt: WRITE • ID SEMICOLON

    ID  shift, and go to state 14


State 9

    1 Program: VarDeclList StmtList •

    $default  reduce using rule 1 (Program)


State 10

    7 StmtList: Stmt • StmtList

    ID     shift, and go to state 7
    WRITE  shift, and go to state 8

    $default  reduce using rule 6 (StmtList)

    StmtList  go to state 15
    Stmt      go to state 10


State 11

    3 VarDeclList: VarDecl VarDeclList •

    $default  reduce using rule 3 (VarDeclList)


State 12

    4 VarDecl: TYPE ID SEMICOLON •

    $default  reduce using rule 4 (VarDecl)


State 13

    8 Stmt: ID EQ • Expr SEMICOLON

    ID      shift, and go to state 16
    NUMBER  shift, and go to state 17

    Expr  go to state 18


State 14

    9 Stmt: WRITE ID • SEMICOLON

    SEMICOLON  shift, and go to state 19


State 15

    7 StmtList: Stmt StmtList •

    $default  reduce using rule 7 (StmtList)


State 16

   11 Expr: ID •

    $default  reduce using rule 11 (Expr)


State 17

   12 Expr: NUMBER •

    $default  reduce using rule 12 (Expr)


State 18

    8 Stmt: ID EQ Expr • SEMICOLON
   10 Expr: Expr • BinOp Expr

    SEMICOLON  shift, and go to state 20
    PLUS       shift, and go to state 21

    BinOp  go to state 22


State 19

    9 Stmt: WRITE ID SEMICOLON •

    $default  reduce using rule 9 (Stmt)


State 20

    8 Stmt: ID EQ Expr SEMICOLON •

    $default  reduce using rule 8 (Stmt)


State 21

   13 BinOp: PLUS •

    $default  reduce using rule 13 (BinOp)


State 22

   10 Expr: Expr BinOp • Expr

    ID      shift, and go to state 16
    NUMBER  shift, and go to state 17

    Expr  go to state 23


State 23

   10 Expr: Expr • BinOp Expr
   10     | Expr BinOp Expr •

    PLUS  shift, and go to state 21

    PLUS      [reduce using rule 10 (Expr)]
    $default  reduce using rule 10 (Expr)

    BinOp  go to state 22
