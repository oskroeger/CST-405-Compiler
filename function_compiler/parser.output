Terminals unused in grammar

    FUNCTION
    UNRECOGNIZED


State 0 conflicts: 1 shift/reduce
State 4 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: FunctionDefList VarDeclList StmtList

    2 FunctionDefList: ε
    3                | FunctionDef FunctionDefList

    4 FunctionDef: TYPE ID LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    5 ParamList: ε
    6          | Param
    7          | Param COMMA ParamList

    8 Param: TYPE ID

    9 VarDeclList: ε
   10            | VarDecl VarDeclList

   11 VarDecl: TYPE ID SEMICOLON
   12        | TYPE ID LBRACKET INTEGER RBRACKET SEMICOLON

   13 StmtList: ε
   14         | Stmt StmtList

   15 Stmt: ID EQ Expr SEMICOLON
   16     | ArrayAccess EQ Expr SEMICOLON
   17     | WRITE Expr SEMICOLON
   18     | FunctionCall SEMICOLON
   19     | RETURN Expr SEMICOLON

   20 FunctionCall: ID LPAREN ArgList RPAREN

   21 ArgList: ε
   22        | Expr
   23        | Expr COMMA ArgList

   24 ArrayAccess: ID LBRACKET Expr RBRACKET

   25 Expr: Expr PLUS Expr
   26     | Expr MINUS Expr
   27     | Expr MULTIPLY Expr
   28     | Expr DIVIDE Expr
   29     | LPAREN Expr RPAREN
   30     | ID
   31     | INTEGER
   32     | FLOAT
   33     | ArrayAccess
   34     | FunctionCall


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    FUNCTION <string> (258)
    RETURN <string> (259) 19
    TYPE <string> (260) 4 8 11 12
    ID <string> (261) 4 8 11 12 15 20 24 30
    SEMICOLON <char> (262) 11 12 15 16 17 18 19
    EQ <operator> (263) 15 16
    PLUS <operator> (264) 25
    MINUS <operator> (265) 26
    MULTIPLY <operator> (266) 27
    DIVIDE <operator> (267) 28
    INTEGER <integer> (268) 12 31
    FLOAT <floatNum> (269) 32
    WRITE <string> (270) 17
    LPAREN (271) 4 20 29
    RPAREN (272) 4 20 29
    LBRACKET (273) 12 24
    RBRACKET (274) 12 24
    LBRACE (275) 4
    RBRACE (276) 4
    COMMA (277) 7 23
    UNRECOGNIZED (278)


Nonterminals, with rules where they appear

    $accept (24)
        on left: 0
    Program <ast> (25)
        on left: 1
        on right: 0
    FunctionDefList <ast> (26)
        on left: 2 3
        on right: 1 3
    FunctionDef <ast> (27)
        on left: 4
        on right: 3
    ParamList <ast> (28)
        on left: 5 6 7
        on right: 4 7
    Param <ast> (29)
        on left: 8
        on right: 6 7
    VarDeclList <ast> (30)
        on left: 9 10
        on right: 1 4 10
    VarDecl <ast> (31)
        on left: 11 12
        on right: 10
    StmtList <ast> (32)
        on left: 13 14
        on right: 1 4 14
    Stmt <ast> (33)
        on left: 15 16 17 18 19
        on right: 14
    FunctionCall <ast> (34)
        on left: 20
        on right: 18 34
    ArgList <ast> (35)
        on left: 21 22 23
        on right: 20 23
    ArrayAccess <ast> (36)
        on left: 24
        on right: 16 33
    Expr <ast> (37)
        on left: 25 26 27 28 29 30 31 32 33 34
        on right: 15 16 17 19 22 23 24 25 26 27 28 29


State 0

    0 $accept: • Program $end

    TYPE  shift, and go to state 1

    TYPE      [reduce using rule 2 (FunctionDefList)]
    $default  reduce using rule 2 (FunctionDefList)

    Program          go to state 2
    FunctionDefList  go to state 3
    FunctionDef      go to state 4


State 1

    4 FunctionDef: TYPE • ID LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    ID  shift, and go to state 5


State 2

    0 $accept: Program • $end

    $end  shift, and go to state 6


State 3

    1 Program: FunctionDefList • VarDeclList StmtList

    TYPE  shift, and go to state 7

    $default  reduce using rule 9 (VarDeclList)

    VarDeclList  go to state 8
    VarDecl      go to state 9


State 4

    3 FunctionDefList: FunctionDef • FunctionDefList

    TYPE  shift, and go to state 1

    TYPE      [reduce using rule 2 (FunctionDefList)]
    $default  reduce using rule 2 (FunctionDefList)

    FunctionDefList  go to state 10
    FunctionDef      go to state 4


State 5

    4 FunctionDef: TYPE ID • LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    LPAREN  shift, and go to state 11


State 6

    0 $accept: Program $end •

    $default  accept


State 7

   11 VarDecl: TYPE • ID SEMICOLON
   12        | TYPE • ID LBRACKET INTEGER RBRACKET SEMICOLON

    ID  shift, and go to state 12


State 8

    1 Program: FunctionDefList VarDeclList • StmtList

    RETURN  shift, and go to state 13
    ID      shift, and go to state 14
    WRITE   shift, and go to state 15

    $default  reduce using rule 13 (StmtList)

    StmtList      go to state 16
    Stmt          go to state 17
    FunctionCall  go to state 18
    ArrayAccess   go to state 19


State 9

   10 VarDeclList: VarDecl • VarDeclList

    TYPE  shift, and go to state 7

    $default  reduce using rule 9 (VarDeclList)

    VarDeclList  go to state 20
    VarDecl      go to state 9


State 10

    3 FunctionDefList: FunctionDef FunctionDefList •

    $default  reduce using rule 3 (FunctionDefList)


State 11

    4 FunctionDef: TYPE ID LPAREN • ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    TYPE  shift, and go to state 21

    $default  reduce using rule 5 (ParamList)

    ParamList  go to state 22
    Param      go to state 23


State 12

   11 VarDecl: TYPE ID • SEMICOLON
   12        | TYPE ID • LBRACKET INTEGER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 24
    LBRACKET   shift, and go to state 25


State 13

   19 Stmt: RETURN • Expr SEMICOLON

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 32


State 14

   15 Stmt: ID • EQ Expr SEMICOLON
   20 FunctionCall: ID • LPAREN ArgList RPAREN
   24 ArrayAccess: ID • LBRACKET Expr RBRACKET

    EQ        shift, and go to state 33
    LPAREN    shift, and go to state 34
    LBRACKET  shift, and go to state 35


State 15

   17 Stmt: WRITE • Expr SEMICOLON

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 36


State 16

    1 Program: FunctionDefList VarDeclList StmtList •

    $default  reduce using rule 1 (Program)


State 17

   14 StmtList: Stmt • StmtList

    RETURN  shift, and go to state 13
    ID      shift, and go to state 14
    WRITE   shift, and go to state 15

    $default  reduce using rule 13 (StmtList)

    StmtList      go to state 37
    Stmt          go to state 17
    FunctionCall  go to state 18
    ArrayAccess   go to state 19


State 18

   18 Stmt: FunctionCall • SEMICOLON

    SEMICOLON  shift, and go to state 38


State 19

   16 Stmt: ArrayAccess • EQ Expr SEMICOLON

    EQ  shift, and go to state 39


State 20

   10 VarDeclList: VarDecl VarDeclList •

    $default  reduce using rule 10 (VarDeclList)


State 21

    8 Param: TYPE • ID

    ID  shift, and go to state 40


State 22

    4 FunctionDef: TYPE ID LPAREN ParamList • RPAREN LBRACE VarDeclList StmtList RBRACE

    RPAREN  shift, and go to state 41


State 23

    6 ParamList: Param •
    7          | Param • COMMA ParamList

    COMMA  shift, and go to state 42

    $default  reduce using rule 6 (ParamList)


State 24

   11 VarDecl: TYPE ID SEMICOLON •

    $default  reduce using rule 11 (VarDecl)


State 25

   12 VarDecl: TYPE ID LBRACKET • INTEGER RBRACKET SEMICOLON

    INTEGER  shift, and go to state 43


State 26

   20 FunctionCall: ID • LPAREN ArgList RPAREN
   24 ArrayAccess: ID • LBRACKET Expr RBRACKET
   30 Expr: ID •

    LPAREN    shift, and go to state 34
    LBRACKET  shift, and go to state 35

    $default  reduce using rule 30 (Expr)


State 27

   31 Expr: INTEGER •

    $default  reduce using rule 31 (Expr)


State 28

   32 Expr: FLOAT •

    $default  reduce using rule 32 (Expr)


State 29

   29 Expr: LPAREN • Expr RPAREN

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 44


State 30

   34 Expr: FunctionCall •

    $default  reduce using rule 34 (Expr)


State 31

   33 Expr: ArrayAccess •

    $default  reduce using rule 33 (Expr)


State 32

   19 Stmt: RETURN Expr • SEMICOLON
   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr

    SEMICOLON  shift, and go to state 45
    PLUS       shift, and go to state 46
    MINUS      shift, and go to state 47
    MULTIPLY   shift, and go to state 48
    DIVIDE     shift, and go to state 49


State 33

   15 Stmt: ID EQ • Expr SEMICOLON

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 50


State 34

   20 FunctionCall: ID LPAREN • ArgList RPAREN

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    $default  reduce using rule 21 (ArgList)

    FunctionCall  go to state 30
    ArgList       go to state 51
    ArrayAccess   go to state 31
    Expr          go to state 52


State 35

   24 ArrayAccess: ID LBRACKET • Expr RBRACKET

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 53


State 36

   17 Stmt: WRITE Expr • SEMICOLON
   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr

    SEMICOLON  shift, and go to state 54
    PLUS       shift, and go to state 46
    MINUS      shift, and go to state 47
    MULTIPLY   shift, and go to state 48
    DIVIDE     shift, and go to state 49


State 37

   14 StmtList: Stmt StmtList •

    $default  reduce using rule 14 (StmtList)


State 38

   18 Stmt: FunctionCall SEMICOLON •

    $default  reduce using rule 18 (Stmt)


State 39

   16 Stmt: ArrayAccess EQ • Expr SEMICOLON

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 55


State 40

    8 Param: TYPE ID •

    $default  reduce using rule 8 (Param)


State 41

    4 FunctionDef: TYPE ID LPAREN ParamList RPAREN • LBRACE VarDeclList StmtList RBRACE

    LBRACE  shift, and go to state 56


State 42

    7 ParamList: Param COMMA • ParamList

    TYPE  shift, and go to state 21

    $default  reduce using rule 5 (ParamList)

    ParamList  go to state 57
    Param      go to state 23


State 43

   12 VarDecl: TYPE ID LBRACKET INTEGER • RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 58


State 44

   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr
   29     | LPAREN Expr • RPAREN

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49
    RPAREN    shift, and go to state 59


State 45

   19 Stmt: RETURN Expr SEMICOLON •

    $default  reduce using rule 19 (Stmt)


State 46

   25 Expr: Expr PLUS • Expr

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 60


State 47

   26 Expr: Expr MINUS • Expr

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 61


State 48

   27 Expr: Expr MULTIPLY • Expr

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 62


State 49

   28 Expr: Expr DIVIDE • Expr

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    FunctionCall  go to state 30
    ArrayAccess   go to state 31
    Expr          go to state 63


State 50

   15 Stmt: ID EQ Expr • SEMICOLON
   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr

    SEMICOLON  shift, and go to state 64
    PLUS       shift, and go to state 46
    MINUS      shift, and go to state 47
    MULTIPLY   shift, and go to state 48
    DIVIDE     shift, and go to state 49


State 51

   20 FunctionCall: ID LPAREN ArgList • RPAREN

    RPAREN  shift, and go to state 65


State 52

   22 ArgList: Expr •
   23        | Expr • COMMA ArgList
   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49
    COMMA     shift, and go to state 66

    $default  reduce using rule 22 (ArgList)


State 53

   24 ArrayAccess: ID LBRACKET Expr • RBRACKET
   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49
    RBRACKET  shift, and go to state 67


State 54

   17 Stmt: WRITE Expr SEMICOLON •

    $default  reduce using rule 17 (Stmt)


State 55

   16 Stmt: ArrayAccess EQ Expr • SEMICOLON
   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr

    SEMICOLON  shift, and go to state 68
    PLUS       shift, and go to state 46
    MINUS      shift, and go to state 47
    MULTIPLY   shift, and go to state 48
    DIVIDE     shift, and go to state 49


State 56

    4 FunctionDef: TYPE ID LPAREN ParamList RPAREN LBRACE • VarDeclList StmtList RBRACE

    TYPE  shift, and go to state 7

    $default  reduce using rule 9 (VarDeclList)

    VarDeclList  go to state 69
    VarDecl      go to state 9


State 57

    7 ParamList: Param COMMA ParamList •

    $default  reduce using rule 7 (ParamList)


State 58

   12 VarDecl: TYPE ID LBRACKET INTEGER RBRACKET • SEMICOLON

    SEMICOLON  shift, and go to state 70


State 59

   29 Expr: LPAREN Expr RPAREN •

    $default  reduce using rule 29 (Expr)


State 60

   25 Expr: Expr • PLUS Expr
   25     | Expr PLUS Expr •
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr

    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49

    $default  reduce using rule 25 (Expr)


State 61

   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   26     | Expr MINUS Expr •
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr

    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49

    $default  reduce using rule 26 (Expr)


State 62

   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   27     | Expr MULTIPLY Expr •
   28     | Expr • DIVIDE Expr

    $default  reduce using rule 27 (Expr)


State 63

   25 Expr: Expr • PLUS Expr
   26     | Expr • MINUS Expr
   27     | Expr • MULTIPLY Expr
   28     | Expr • DIVIDE Expr
   28     | Expr DIVIDE Expr •

    $default  reduce using rule 28 (Expr)


State 64

   15 Stmt: ID EQ Expr SEMICOLON •

    $default  reduce using rule 15 (Stmt)


State 65

   20 FunctionCall: ID LPAREN ArgList RPAREN •

    $default  reduce using rule 20 (FunctionCall)


State 66

   23 ArgList: Expr COMMA • ArgList

    ID       shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    LPAREN   shift, and go to state 29

    $default  reduce using rule 21 (ArgList)

    FunctionCall  go to state 30
    ArgList       go to state 71
    ArrayAccess   go to state 31
    Expr          go to state 52


State 67

   24 ArrayAccess: ID LBRACKET Expr RBRACKET •

    $default  reduce using rule 24 (ArrayAccess)


State 68

   16 Stmt: ArrayAccess EQ Expr SEMICOLON •

    $default  reduce using rule 16 (Stmt)


State 69

    4 FunctionDef: TYPE ID LPAREN ParamList RPAREN LBRACE VarDeclList • StmtList RBRACE

    RETURN  shift, and go to state 13
    ID      shift, and go to state 14
    WRITE   shift, and go to state 15

    $default  reduce using rule 13 (StmtList)

    StmtList      go to state 72
    Stmt          go to state 17
    FunctionCall  go to state 18
    ArrayAccess   go to state 19


State 70

   12 VarDecl: TYPE ID LBRACKET INTEGER RBRACKET SEMICOLON •

    $default  reduce using rule 12 (VarDecl)


State 71

   23 ArgList: Expr COMMA ArgList •

    $default  reduce using rule 23 (ArgList)


State 72

    4 FunctionDef: TYPE ID LPAREN ParamList RPAREN LBRACE VarDeclList StmtList • RBRACE

    RBRACE  shift, and go to state 73


State 73

    4 FunctionDef: TYPE ID LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE •

    $default  reduce using rule 4 (FunctionDef)
